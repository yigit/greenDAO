package de.greenrobot.daoexample;

import de.greenrobot.daoexample.DaoSession;
import de.greenrobot.dao.DaoException;


import de.greenrobot.dao.DbUtils;




// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT . Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table ORDERS.
 */
abstract public class OrderBase {

    protected Long id;
    protected java.util.Date date;
    protected long customerId;
    protected byte[] serializedCustomer;

    //denormalized properties
    private Customer customer2;



    /** Used to resolve relations */
    protected transient DaoSession daoSession;

    /** Used for active entity operations. */
    protected transient OrderDao myDao;

    protected Customer customer;
    protected Long customer__resolvedKey;


    public OrderBase() {
    }

    public OrderBase(Long id) {
        this.id = id;
    }

    public OrderBase(Long id, java.util.Date date, long customerId, byte[] serializedCustomer) {
        this.id = id;
        this.date = date;
        this.customerId = customerId;
        this.serializedCustomer = serializedCustomer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public long getCustomerId() {
        return customerId;
    }

    public void setCustomerId(long customerId) {
        this.customerId = customerId;
    }

    public byte[] getSerializedCustomer() {
        return serializedCustomer;
    }

    public void setSerializedCustomer(byte[] serializedCustomer) {
        this.serializedCustomer = serializedCustomer;
    }

    /** To-one relationship, resolved on first access. */
    public Customer getCustomer() {
        if (customer__resolvedKey == null || !customer__resolvedKey.equals(customerId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CustomerDao targetDao = daoSession.getCustomerDao();
            customer = targetDao.load(customerId);
            customer__resolvedKey = customerId;
        }
        return customer;
    }

    public void setCustomer(Customer customer) {
        if (customer == null) {
            throw new DaoException("To-one property 'customerId' has not-null constraint; cannot set to-one to null");
        }
        this.customer = customer;
        customerId = customer.getId();
        customer__resolvedKey = customerId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete((Order)this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update((Order)this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh((Order)this);
    }

    public void updateNotNull(Order other) {
        if(other.id != null) {
            this.id = other.id;
        }

        if(other.date != null) {
            this.date = other.date;
        }

        if(other.customerId != null) {
            this.customerId = other.customerId;
        }

        //serialized
        if(other.getCustomer2() != null) {
            setCustomer2(other.getCustomer2());
        }

        // relationships
        if(other.getCustomer() != null) {
            this.setCustomer(other.getCustomer());
        }
    }
    public Customer getCustomer2() {
        if(customer2 == null && serializedCustomer != null) {
           customer2  = (Customer) DbUtils.deserializeObject(serializedCustomer);
           serializedCustomer = null; //clear memory, before save, we'll re-serialize anyways if needed
        }
        return customer2;
    }

    public void setCustomer2(Customer customer2) {
        this.customer2 = customer2;
        serializedCustomer = null; //onBeforeSave will do serialization
    }


}
